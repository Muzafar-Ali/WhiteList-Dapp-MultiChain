import { ethers } from 'ethers';
import Head from 'next/head'
import Image from 'next/image'
import { useState } from 'react';
import { abi, whiteListContractAddress, whitelistContractMumbai } from '../helper';
import styles from '../styles/Home.module.css'
import { multiChain } from './components/Multichain';

export default function Home(){
  const [walletConnected, setWalletConnected] = useState();
  const [whiteListedAddress, setWhiteListedAddress] = useState([])


  const connectWallet = async()=>{
    try {
      const provider = new ethers.providers.Web3Provider(window.ethereum)
      console.log(ethereum._state);
      //(1)connecting or "logging in" to MetaMask (2)"to access the user's Ethereum account(s)"
      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
      const connectedWallet = accounts[0];

      /***  SWITCH NETWORK ****/
      // if network selected is other than mumbai switch network
      /*if(provider.network !== '0x13881'){
        await ethereum.request({
          method: 'wallet_switchEthereumChain',
          params:[
            {chainId: '0x13881'}
          ]
        })
      }*/
      
      setWalletConnected(connectedWallet)
    } catch (error) {
      console.log('Wallet Connect', error)
    }
  }

  const joinWhitelist = async()=>{
    const provider = new ethers.providers.Web3Provider(window.ethereum)
    const signer = provider.getSigner();
    const networkConnected = ethereum.chainId;

    // multiChain functionality
    // multiChain function will return the chain which user is connected to.  
    const chainConnected = await multiChain(networkConnected);

    if(chainConnected == 'mumbai'){
      const whitelistContract = new ethers.Contract(whitelistContractMumbai,abi,signer);
      const tx = await whitelistContract.addAddressToWhitelist();
      await tx.wait()
    }else if(chainConnected =='goerli'){
      const whitelistContract = new ethers.Contract(whiteListContractAddress,abi,signer);
      const tx = await whitelistContract.addAddressToWhitelist();
      await tx.wait()
    }  
    whiteListedAddress.push(walletConnected);
  }

  if(!walletConnected){
    return(
      <div>
        <button onClick={connectWallet}>Connect Wallet</button>
      </div>
    )
  }else if(walletConnected){
      return(
        <div>
          <button onClick={joinWhitelist}>Join White List</button>
          <div>
            Your connected address : {walletConnected}
          </div>
        </div>
      )
    }

  return (
    <div className={styles.container}>
      <Head>
        <title>Whitelist Dapp</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
      WAO
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

